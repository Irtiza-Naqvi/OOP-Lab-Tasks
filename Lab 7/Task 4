#include <iostream>
#include <string>
using namespace std;

class Person {
protected:
    string name;
    int age;
    string contactNumber;
    string address;

public:
    Person(string n, int a, string cn, string addr = "") 
        : name(n), age(a), contactNumber(cn), address(addr) {}

    virtual void displayInfo() {
        cout << "Name: " << name << endl;
        cout << "Age: " << age << endl;
        cout << "Contact Number: " << contactNumber << endl;
        if (!address.empty()) {
            cout << "Address: " << address << endl;
        }
    }

    virtual void updateInfo(string n, int a, string cn, string addr = "") {
        name = n;
        age = a;
        contactNumber = cn;
        address = addr;
    }
};

class Patient : public Person {
private:
    string patientID;
    string medicalHistory;
    string doctorAssigned;

public:
    Patient(string n, int a, string cn, string pid, string mh = "", string da = "", string addr = "")
        : Person(n, a, cn, addr), patientID(pid), medicalHistory(mh), doctorAssigned(da) {}

    void displayInfo() override {
        cout << "\n--- Patient Record ---" << endl;
        Person::displayInfo();
        cout << "Patient ID: " << patientID << endl;
        if (!medicalHistory.empty()) {
            cout << "Medical History: " << medicalHistory << endl;
        }
        if (!doctorAssigned.empty()) {
            cout << "Doctor Assigned: " << doctorAssigned << endl;
        }
    }

    void updateInfo(string n, int a, string cn, string pid, string mh = "", string da = "", string addr = "") {
        Person::updateInfo(n, a, cn, addr);
        patientID = pid;
        medicalHistory = mh;
        doctorAssigned = da;
    }
};

class Doctor : public Person {
private:
    string specialization;
    float consultationFee;
    string patientList[100];
    int patientCount;

public:
    Doctor(string n, int a, string cn, string spec, float fee, string addr = "")
        : Person(n, a, cn, addr), specialization(spec), consultationFee(fee), patientCount(0) {}

    void displayInfo() override {
        cout << "\n--- Doctor Profile ---" << endl;
        Person::displayInfo();
        cout << "Specialization: " << specialization << endl;
        cout << "Consultation Fee: $" << consultationFee << endl;
        if (patientCount > 0) {
            cout << "Patients Assigned (" << patientCount << "):" << endl;
            for (int i = 0; i < patientCount; i++) {
                cout << " - " << patientList[i] << endl;
            }
        }
    }

    void addPatient(string patientName) {
        if (patientCount < 100) {
            patientList[patientCount++] = patientName;
        } else {
            cout << "Doctor's patient list is full!" << endl;
        }
    }
};

class Nurse : public Person {
private:
    string assignedWard;
    string shiftTimings;

public:
    Nurse(string n, int a, string cn, string ward, string shift, string addr = "")
        : Person(n, a, cn, addr), assignedWard(ward), shiftTimings(shift) {}

    void displayInfo() override {
        cout << "\n--- Nurse Information ---" << endl;
        Person::displayInfo();
        cout << "Assigned Ward: " << assignedWard << endl;
        cout << "Shift Timings: " << shiftTimings << endl;
    }
};

class Administrator : public Person {
private:
    string department;
    float salary;

public:
    Administrator(string n, int a, string cn, string dept, float sal, string addr = "")
        : Person(n, a, cn, addr), department(dept), salary(sal) {}

    void displayInfo() override {
        cout << "\n--- Administrator Details ---" << endl;
        Person::displayInfo();
        cout << "Department: " << department << endl;
        cout << "Salary: $" << salary << endl;
    }

    void updateInfo(string n, int a, string cn, string dept, float sal, string addr = "") {
        Person::updateInfo(n, a, cn, addr);
        department = dept;
        salary = sal;
    }
};

int main() {
    Patient patient1("John Doe", 35, "555-1234", "P1001", "Allergies to penicillin", "Dr. Smith", "123 Main St");
    Doctor doctor1("Dr. Smith", 45, "555-5678", "Cardiology", 150.00, "456 Oak Ave");
    Nurse nurse1("Nurse Johnson", 28, "555-9012", "Emergency", "Day Shift (7am-7pm)");
    Administrator admin1("Mr. Brown", 50, "555-3456", "HR", 65000.00);
    doctor1.addPatient("John Doe");
    doctor1.addPatient("Jane Smith");
    cout << "=== Hospital Management System ===" << endl;
    patient1.displayInfo();
    doctor1.displayInfo();
    nurse1.displayInfo();
    admin1.displayInfo();

    return 0;
}

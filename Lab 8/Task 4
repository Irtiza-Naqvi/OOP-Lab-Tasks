#include <iostream>
#include <string>
using namespace std;

class InventoryManager;

class Car {
private:
    string model;
    double price;

public:
    Car(string modelName, double carPrice) : model(modelName), price(carPrice) {}

    friend class InventoryManager;

    friend void comparePrice(const Car& car1, const Car& car2);
};

class InventoryManager {
public:
    static void updatePrice(Car& car, double newPrice) {
        if (newPrice >= 0) {
            car.price = newPrice;
            cout << "Updated price for " << car.model << " to $" << newPrice << endl;
        } else {
            cout << "Invalid price! Price cannot be negative." << endl;
        }
    }

    static void displayCarDetails(const Car& car) {
        cout << "\n--- Car Details ---" << endl;
        cout << "Model: " << car.model << endl;
        cout << "Price: $" << car.price << endl;
        cout << "------------------" << endl;
    }
};

void comparePrice(const Car& car1, const Car& car2) {
    cout << "\nPrice Comparison:" << endl;
    cout << car1.model << ": $" << car1.price << endl;
    cout << car2.model << ": $" << car2.price << endl;

    if (car1.price > car2.price) {
        cout << car1.model << " is more expensive than " << car2.model << endl;
    } else if (car2.price > car1.price) {
        cout << car2.model << " is more expensive than " << car1.model << endl;
    } else {
        cout << "Both cars have the same price." << endl;
    }
}

int main() {
    Car car1("Toyota Camry", 25000.0);
    Car car2("Honda Accord", 27000.0);
    Car car3("Ford Mustang", 35000.0);
    InventoryManager::displayCarDetails(car1);
    InventoryManager::displayCarDetails(car2);
    InventoryManager::displayCarDetails(car3);
    InventoryManager::updatePrice(car1, 25500.0);
    InventoryManager::updatePrice(car2, 26500.0);
    comparePrice(car1, car2);
    comparePrice(car1, car3);
    comparePrice(car2, car3);
    InventoryManager::updatePrice(car3, -1000.0);

    return 0;
}

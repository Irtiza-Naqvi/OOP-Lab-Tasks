#include <iostream>
#include <cstring>

using namespace std;

class Product {
private:
    int id;
    char name[50];
    int quantity;

public:
    Product() {}

    Product(int id, const char* name, int quantity) {
        this->id = id;
        strcpy(this->name, name);
        this->quantity = quantity;
    }

    int getId() const {
        return id;
    }

    const char* getName() const {
        return name;
    }

    void display() const {
        cout << "ID: " << id << ", Name: " << name << ", Quantity: " << quantity << endl;
    }

    static void sortProducts(Product products[], int size) {
        for (int i = 0; i < size - 1; i++) {
            for (int j = i + 1; j < size; j++) {
                if (strcmp(products[i].getName(), products[j].getName()) > 0) {
                    swap(products[i], products[j]);
                }
            }
        }
    }

    static void searchById(Product products[], int size, int searchId) {
        for (int i = 0; i < size; i++) {
            if (products[i].getId() == searchId) {
                cout << "Product found: ";
                products[i].display();
                return;
            }
        }
        cout << "Product with ID " << searchId << " not found.\n";
    }
};

int main() {
    int n;
    cout << "Enter number of products: ";
    cin >> n;

    Product* products = new Product[n];

    for (int i = 0; i < n; i++) {
        int id, quantity;
        char name[50];
        cout << "Enter Product ID: ";
        cin >> id;
        cout << "Enter Product Name: ";
        cin.ignore();
        cin.getline(name, 50);
        cout << "Enter Quantity: ";
        cin >> quantity;
        products[i] = Product(id, name, quantity);
    }

    cout << "\nSorting products alphabetically...\n";
    Product::sortProducts(products, n);

    cout << "\nSorted Product List:\n";
    for (int i = 0; i < n; i++) {
        products[i].display();
    }

    int searchId;
    cout << "\nEnter Product ID to search: ";
    cin >> searchId;
    Product::searchById(products, n, searchId);

    delete[] products;
    
    return 0;
}

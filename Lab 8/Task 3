#include <iostream>
#include <cmath>
using namespace std;

class Vector2D {
private:
    double x;
    double y;

public:
    Vector2D(double xVal = 0.0, double yVal = 0.0) : x(xVal), y(yVal) {}

    double getX() const { return x; }
    double getY() const { return y; }

    Vector2D operator+(const Vector2D& other) const {
        return Vector2D(x + other.x, y + other.y);
    }

    Vector2D operator-(const Vector2D& other) const {
        return Vector2D(x - other.x, y - other.y);
    }

    Vector2D operator*(double scalar) const {
        return Vector2D(x * scalar, y * scalar);
    }

    friend double dotProduct(const Vector2D& v1, const Vector2D& v2);

    friend ostream& operator<<(ostream& os, const Vector2D& v);
};

double dotProduct(const Vector2D& v1, const Vector2D& v2) {
    return v1.x * v2.x + v1.y * v2.y;
}

ostream& operator<<(ostream& os, const Vector2D& v) {
    os << "(" << v.x << ", " << v.y << ")";
    return os;
}

Vector2D operator*(double scalar, const Vector2D& v) {
    return v * scalar;
}

int main() {
    Vector2D v1(3.0, 4.0);
    Vector2D v2(1.5, -2.5);
    double scalar = 2.0;

    cout << "Vector v1: " << v1 << endl;
    cout << "Vector v2: " << v2 << endl;
    cout << "Scalar: " << scalar << endl << endl;

    cout << "Vector Addition (v1 + v2): " << v1 + v2 << endl;
    cout << "Vector Subtraction (v1 - v2): " << v1 - v2 << endl;
    cout << "Scalar Multiplication (v1 * " << scalar << "): " << v1 * scalar << endl;
    cout << "Scalar Multiplication (" << scalar << " * v1): " << scalar * v1 << endl;
    cout << "Dot Product (v1 â€¢ v2): " << dotProduct(v1, v2) << endl;

    double dp = dotProduct(v1, v2);
    double magV1 = sqrt(dotProduct(v1, v1));
    double magV2 = sqrt(dotProduct(v2, v2));
    if (magV1 > 0 && magV2 > 0) {
        double cosTheta = dp / (magV1 * magV2);
        double angle = acos(cosTheta) * 180.0 / M_PI;
        cout << "\nAngle between v1 and v2: " << angle << " degrees" << endl;
    }

    return 0;
}

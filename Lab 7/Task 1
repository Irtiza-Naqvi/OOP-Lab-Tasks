#include <iostream>
#include <string>
using namespace std;

class Device {
protected:
    int deviceID;
    string deviceName;
    bool status;
    string location;

public:
    Device(int id, const string& name, bool stat, const string& loc = "")
        : deviceID(id), deviceName(name), status(stat), location(loc) {}

    virtual void turnOn() {
        status = true;
        cout << deviceName << " turned ON." << endl;
    }

    virtual void turnOff() {
        status = false;
        cout << deviceName << " turned OFF." << endl;
    }

    virtual void getStatus() {
        cout << deviceName << " is " << (status ? "ON" : "OFF") << "." << endl;
    }

    virtual void displayInfo() {
        cout << "Device ID: " << deviceID << "\n"
             << "Name: " << deviceName << "\n"
             << "Status: " << (status ? "ON" : "OFF") << "\n"
             << "Location: " << location << "\n";
    }

    virtual ~Device() {}
};

class Light : public Device {
    int brightnessLevel;
    string colorMode;

public:
    Light(int id, const string& name, bool stat, const string& loc,
          int brightness, const string& color)
        : Device(id, name, stat, loc), brightnessLevel(brightness), colorMode(color) {}

    void displayInfo() override {
        Device::displayInfo();
        cout << "Brightness Level: " << brightnessLevel << "\n"
             << "Color Mode: " << colorMode << "\n";
    }
};

class Thermostat : public Device {
    float temperature;
    string mode;
    float targetTemperature;

public:
    Thermostat(int id, const string& name, bool stat, const string& loc,
               float temp, const string& mod, float targetTemp)
        : Device(id, name, stat, loc), temperature(temp), mode(mod), targetTemperature(targetTemp) {}

    void getStatus() override {
        cout << deviceName << " Temperature: " << temperature
             << "°C, Mode: " << mode
             << ", Target: " << targetTemperature << "°C\n";
    }
};

class SecurityCamera : public Device {
    string resolution;
    bool recordingStatus;
    bool nightVisionEnabled;

public:
    SecurityCamera(int id, const string& name, bool stat, const string& loc,
                   const string& res, bool nightVision)
        : Device(id, name, stat, loc), resolution(res), recordingStatus(false), nightVisionEnabled(nightVision) {}

    void turnOn() override {
        status = true;
        recordingStatus = true;
        cout << deviceName << " is now recording. Resolution: " << resolution << "\n";
    }
};

class SmartPlug : public Device {
    float powerConsumption;
    int timerSetting;

public:
    SmartPlug(int id, const string& name, bool stat, const string& loc,
              float power, int timer)
        : Device(id, name, stat, loc), powerConsumption(power), timerSetting(timer) {}

    void turnOff() override {
        status = false;
        cout << deviceName << " turned OFF. Power usage logged: " << powerConsumption << "W\n";
    }
};

int main() {
    Light light(1, "Bedroom Light", false, "Bedroom", 75, "Warm");
    Thermostat thermostat(2, "Main Thermostat", true, "Hall", 22.5, "Heating", 24.0);
    SecurityCamera camera(3, "Front Door Camera", false, "Entrance", "1080p", true);
    SmartPlug plug(4, "Coffee Maker Plug", true, "Kitchen", 120.0, 30);

    light.turnOn();
    light.displayInfo();
    thermostat.getStatus();
    camera.turnOn();
    plug.turnOff();

    return 0;
}
